<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/x-icon" href="favicon.png">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&icon_names=upload" />

  <title>Block.HP</title>

</head>


<body>
  <header>

    <div class="hamburger" id="hamburger">
      <span class="hamburger-line" id="line-1"></span>
      <span class="hamburger-line" id="line-2"></span>
      <span class="hamburger-line" id="line-3"></span>
    </div>

    <h1>Upload</h1>

  </header>

  <nav id="navBar">
    <a href="/">Home</a>
    <a href="/gallery">Gallery</a>
  </nav>


  <main class="app">

    <div class="header">
      <div class="server-message"></div>
    </div>

    <div class="upload-images-container">

      <div class="input-div">
        <span class="upload-symbol">
          upload
        </span>
        <p class="browse">Upload</p>
        <input type="file" class="file" name="file" multiple="multiple" accept="image/jpeg, image/png, image/jpg" />
      </div>

      <form id="queued-form">
        <div class="queued-div"></div>
        <button id="upload-btn" class="upload-button" type="submit">Upload</button>
      </form>

    </div>

    <span class="line-break"></span>

    <form id="saved-form">
      <div class="header saved-header">
        <h3>Saved Images</h3>
        <button class="delete-button" type="submit">Refresh</button>
      </div>
      <div class="saved-div"></div>
    </form>


  </main>

  <script>

    console.log("This website was developed and designed by Nathan J. Boquiren. For your own personal website, resume/cv, or landing page, contact me at nathanjboquiren@gmail.com")

    let queuedImagesArray = [],
      savedForm = document.querySelector("#saved-form"),
      queuedForm = document.querySelector("#queued-form"),
      savedDiv = document.querySelector('.saved-div'),
      queuedDiv = document.querySelector('.queued-div'),
      inputDiv = document.querySelector('.input-div'),
      input = document.querySelector('.input-div input'),
      serverMessage = document.querySelector('.server-message'),
      savedImages = JSON.parse('<%-JSON.stringify(images)%>'),
      deleteImages = [],
      uploadBtn = document.getElementById("upload-btn");

    // SAVED IMAGES
    if (savedImages) displaySavedImages();

    function displaySavedImages() {
      let images = "";
      savedImages.forEach((image, index) => {
        images += `<div class="image">
                      <img src="/image/${image.id}" alt="${image.name}" loading="lazy">
                      <span onclick="deleteSavedImage(${index})">&times;</span>
                   </div>`;
      });
      savedDiv.innerHTML = images;
    }

    function deleteSavedImage(index) {
      deleteImages.push(savedImages[index].id);
      savedImages.splice(index, 1);
      displaySavedImages();
    }

    savedForm.addEventListener("submit", (e) => {
      e.preventDefault()
      deleteImagesFromServer()
    });

    function deleteImagesFromServer() {
      fetch('/delete', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          deleteImageIds: deleteImages,
        }),
      })
        .then(response => {
          if (response.ok) {
            alert('Images successfully deleted');
            deleteImages = [];
          } else {
            alert('Failed to delete images');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while deleting the images');
        });
    }

    // QUEUED IMAGES

    function displayQueuedImages() {
      let images = "";
      queuedImagesArray.forEach((image, index) => {
        images += `<div class="image">
                    <img src="${URL.createObjectURL(image)}" alt="image">
                    <span onclick="deleteQueuedImage(${index})">&times;</span>
                  </div>`;
      })
      queuedDiv.innerHTML = images;
      document.querySelector(".upload-symbol").style.display = "none";
      document.querySelector(".browse").style.display = "none";
    }

    function deleteQueuedImage(index) {
      queuedImagesArray.splice(index, 1);
      displayQueuedImages();
    }

    input.addEventListener("change", () => {
      const files = input.files;
      for (let i = 0; i < files.length; i++) {
        queuedImagesArray.push(files[i])
      }
      queuedForm.reset();
      displayQueuedImages();

    });

    inputDiv.addEventListener("drop", (e) => {
      e.preventDefault()
      const files = e.dataTransfer.files
      for (let i = 0; i < files.length; i++) {
        if (!files[i].type.match("image")) continue; // only photos

        if (queuedImagesArray.every(image => image.name !== files[i].name))
          queuedImagesArray.push(files[i])
      }
      displayQueuedImages();
    });

    queuedForm.addEventListener("submit", (e) => {
      e.preventDefault();
      sendQueuedImagesToServer();
    });

    function sendQueuedImagesToServer() {

      uploadBtn.innerHTML = `<img id="loading-img" src="../loading.gif"
      alt="loading">`
      const formData = new FormData(queuedForm);
      queuedImagesArray.forEach((image) => {
        formData.append("file", image)
      })
      fetch("upload", {
        method: "POST",
        body: formData
      })
        .then(response => {
          if (response.status !== 200) throw Error(response.statusText)
          location.reload();
          uploadBtn.innerHTML = `Upload`;
        })
        .catch(error => {
          serverMessage.innerHTML = error
          serverMessage.style.cssText = "background-color: #f8d7da; color:#b71c1c"
        });
    }


    // Hamburger Menu Function

    let navMenuShow = function () {
      let navMenu = document.getElementById("navBar");
      let lineOne = document.getElementById("line-1");
      let lineTwo = document.getElementById("line-2");
      let lineThree = document.getElementById("line-3");

      if (navMenu.style.left === "0px") {
        navMenu.style.left = "-180px";
        lineOne.style.transform = "rotate(0deg)";
        lineTwo.style.transform = "scale(1)";
        lineThree.style.transform = "rotate(0deg)";
      } else {
        navMenu.style.left = "0";
        lineOne.style.transform = "translateX(32px) translateY(1px) rotate(135deg)";
        lineTwo.style.transform = "scale(0)";
        lineThree.style.transform = "rotate(45deg)";
      }
    };

    document.getElementById("hamburger").addEventListener("click", navMenuShow);

  </script>

</body>

</html>